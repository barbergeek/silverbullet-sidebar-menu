{
  "version": 3,
  "sources": ["https://deno.land/x/silverbullet@0.9.4/lib/plugos/worker_runtime.ts", "https://jsr.io/@silverbulletmd/silverbullet/0.9.4/plug-api/syscalls/editor.ts", "https://jsr.io/@silverbulletmd/silverbullet/0.9.4/plug-api/syscall.ts", "outline-sidebar.ts", "86575c64e9523a71.js"],
  "sourcesContent": ["// This is the runtime imported from the compiled plug worker code\nimport type { ControllerMessage, WorkerMessage } from \"./protocol.ts\";\nimport type { ProxyFetchRequest, ProxyFetchResponse } from \"../proxy_fetch.ts\";\n\ndeclare global {\n  function syscall(name: string, ...args: any[]): Promise<any>;\n}\n\n// Are we running in a (web) worker?\n\n// Determines if we're running in a web worker environment (Deno or browser)\n// - in a browser's main threads, typeof window is \"object\"\n// - in a browser's worker threads, typeof window === \"undefined\"\n// - in Deno's main thread typeof window === \"object\"\n// - in Deno's workers typeof window === \"undefined\n// - in Cloudflare workers typeof window === \"undefined\", but typeof globalThis.WebSocketPair is defined\nconst runningAsWebWorker = typeof window === \"undefined\" &&\n  // @ts-ignore: globalThis\n  typeof globalThis.WebSocketPair === \"undefined\";\n\n// console.log(\"Running as web worker:\", runningAsWebWorker);\n\nif (typeof Deno === \"undefined\") {\n  // @ts-ignore: Deno hack\n  self.Deno = {\n    args: [],\n    // @ts-ignore: Deno hack\n    build: {\n      arch: \"x86_64\",\n    },\n    env: {\n      // @ts-ignore: Deno hack\n      get() {\n      },\n    },\n  };\n}\n\nconst pendingRequests = new Map<\n  number,\n  {\n    resolve: (result: unknown) => void;\n    reject: (e: any) => void;\n  }\n>();\n\nlet syscallReqId = 0;\n\nfunction workerPostMessage(msg: ControllerMessage) {\n  self.postMessage(msg);\n}\n\nif (runningAsWebWorker) {\n  globalThis.syscall = async (name: string, ...args: any[]) => {\n    return await new Promise((resolve, reject) => {\n      syscallReqId++;\n      pendingRequests.set(syscallReqId, { resolve, reject });\n      workerPostMessage({\n        type: \"sys\",\n        id: syscallReqId,\n        name,\n        args,\n      });\n    });\n  };\n}\n\nexport function setupMessageListener(\n  // deno-lint-ignore ban-types\n  functionMapping: Record<string, Function>,\n  manifest: any,\n) {\n  if (!runningAsWebWorker) {\n    // Don't do any of this stuff if this is not a web worker\n    // This caters to the NoSandbox run mode\n    return;\n  }\n  self.addEventListener(\"message\", (event: { data: WorkerMessage }) => {\n    (async () => {\n      const data = event.data;\n      switch (data.type) {\n        case \"inv\":\n          {\n            const fn = functionMapping[data.name!];\n            if (!fn) {\n              throw new Error(`Function not loaded: ${data.name}`);\n            }\n            try {\n              const result = await Promise.resolve(fn(...(data.args || [])));\n              workerPostMessage({\n                type: \"invr\",\n                id: data.id,\n                result: result,\n              } as ControllerMessage);\n            } catch (e: any) {\n              console.error(\n                \"An exception was thrown as a result of invoking function\",\n                data.name,\n                \"error:\",\n                e.message,\n              );\n              workerPostMessage({\n                type: \"invr\",\n                id: data.id!,\n                error: e.message,\n              });\n            }\n          }\n          break;\n        case \"sysr\":\n          {\n            const syscallId = data.id;\n            const lookup = pendingRequests.get(syscallId);\n            if (!lookup) {\n              throw Error(\"Invalid request id\");\n            }\n            pendingRequests.delete(syscallId);\n            if (data.error) {\n              lookup.reject(new Error(data.error));\n            } else {\n              lookup.resolve(data.result);\n            }\n          }\n\n          break;\n      }\n    })().catch(console.error);\n  });\n  // Signal initialization with manifest\n  workerPostMessage({\n    type: \"manifest\",\n    manifest,\n  });\n}\n\nexport function base64Decode(s: string): Uint8Array {\n  const binString = atob(s);\n  const len = binString.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binString.charCodeAt(i);\n  }\n  return bytes;\n}\n\nexport function base64Encode(buffer: Uint8Array | string): string {\n  if (typeof buffer === \"string\") {\n    buffer = new TextEncoder().encode(buffer);\n  }\n  let binary = \"\";\n  const len = buffer.byteLength;\n  for (let i = 0; i < len; i++) {\n    binary += String.fromCharCode(buffer[i]);\n  }\n  return btoa(binary);\n}\n\nexport async function sandboxFetch(\n  reqInfo: RequestInfo,\n  options?: ProxyFetchRequest,\n): Promise<ProxyFetchResponse> {\n  if (typeof reqInfo !== \"string\") {\n    const body = new Uint8Array(await reqInfo.arrayBuffer());\n    const encodedBody = body.length > 0 ? base64Encode(body) : undefined;\n    options = {\n      method: reqInfo.method,\n      headers: Object.fromEntries(reqInfo.headers.entries()),\n      base64Body: encodedBody,\n    };\n    reqInfo = reqInfo.url;\n  }\n  return syscall(\"sandboxFetch.fetch\", reqInfo, options);\n}\n\n// @ts-ignore: monkey patching fetch\nglobalThis.nativeFetch = globalThis.fetch;\n// Monkey patch fetch()\nexport function monkeyPatchFetch() {\n  // @ts-ignore: monkey patching fetch\n  globalThis.fetch = async function (\n    reqInfo: RequestInfo,\n    init?: RequestInit,\n  ): Promise<Response> {\n    const encodedBody = init && init.body\n      ? base64Encode(\n        new Uint8Array(await (new Response(init.body)).arrayBuffer()),\n      )\n      : undefined;\n    const r = await sandboxFetch(\n      reqInfo,\n      init && {\n        method: init.method,\n        headers: init.headers as Record<string, string>,\n        base64Body: encodedBody,\n      },\n    );\n    return new Response(r.base64Body ? base64Decode(r.base64Body) : null, {\n      status: r.status,\n      headers: r.headers,\n    });\n  };\n}\n\nif (runningAsWebWorker) {\n  monkeyPatchFetch();\n}\n\n// denoCacheMetadata={\"headers\":{\"via\":\"http/2 edgeproxy-h\",\"x-amz-cf-pop\":\"SYD62-P3\",\"content-security-policy\":\"default-src 'none'; style-src 'unsafe-inline'; sandbox\",\"cross-origin-embedder-policy\":\"same-origin\",\"cross-origin-resource-policy\":\"same-origin\",\"x-cache\":\"Miss from cloudfront\",\"etag\":\"\\\"12ed30a3c3b56ca3154545fe13c6c5db\\\"\",\"x-content-type-options\":\"nosniff\",\"vary\":\"Accept-Encoding, Origin\",\"cross-origin-opener-policy\":\"same-origin\",\"last-modified\":\"Wed, 04 Sep 2024 17:33:42 GMT\",\"server\":\"deno/gcp-australia-southeast1\",\"x-amz-replication-status\":\"COMPLETED\",\"x-amz-server-side-encryption\":\"AES256\",\"date\":\"Sun, 27 Oct 2024 12:33:14 GMT\",\"accept-ranges\":\"bytes\",\"access-control-allow-origin\":\"*\",\"cache-control\":\"public, max-age=31536000, immutable\",\"content-length\":\"5654\",\"x-frame-options\":\"DENY\",\"content-type\":\"application/typescript; charset=utf-8\",\"x-amz-cf-id\":\"rvZSMldEylQ3G4PnsZbNShU8sC5UF2gpqt8mmH-ccU4SR-v8JCsdTg==\",\"x-amz-version-id\":\"A3npvGctsM8CR1BjY56byAdj3DRX2PC.\",\"server-timing\":\"fetchSource;dur=828\",\"referrer-policy\":\"strict-origin-when-cross-origin\",\"strict-transport-security\":\"max-age=63072000; includeSubDomains; preload\"},\"url\":\"https://deno.land/x/silverbullet@0.9.4/lib/plugos/worker_runtime.ts\",\"time\":1730032393}", "import type { UploadFile } from \"../types.ts\";\nimport { syscall } from \"../syscall.ts\";\nimport type { PageRef } from \"../lib/page_ref.ts\";\nimport type { FilterOption } from \"../../type/client.ts\";\n\n/**\n * Exposes various editor utilities.\n * Important: These syscalls are only available in the client.\n * @module\n */\n\n/**\n * Returns the name of the page currently open in the editor.\n * @returns the current page name\n */\nexport function getCurrentPage(): Promise<string> {\n  return syscall(\"editor.getCurrentPage\");\n}\n\n/**\n * Returns the full text of the currently open page\n */\nexport function getText(): Promise<string> {\n  return syscall(\"editor.getText\");\n}\n\n/**\n * This updates the editor text, but in a minimal-diff way:\n * it compares the current editor text with the new text, and only sends the changes to the editor, thereby preserving cursor location\n */\nexport function setText(newText: string): Promise<void> {\n  return syscall(\"editor.setText\", newText);\n}\n\n/**\n * Returns the position (in # of characters from the beginning of the file) of the cursor in the editor\n */\nexport function getCursor(): Promise<number> {\n  return syscall(\"editor.getCursor\");\n}\n\n/**\n * Returns the line number and column number of the cursor in the editor\n */\nexport function getSelection(): Promise<{ from: number; to: number }> {\n  return syscall(\"editor.getSelection\");\n}\n\n/**\n * Sets the position of the cursor in the editor\n * @param from the start position of the selection\n * @param to the end position of the selection\n */\nexport function setSelection(from: number, to: number): Promise<void> {\n  return syscall(\"editor.setSelection\", from, to);\n}\n\n/**\n * Forces a save of the current page\n */\nexport function save(): Promise<void> {\n  return syscall(\"editor.save\");\n}\n\n/**\n * Navigates to the specified page reference\n * @param pageRef the page reference to navigate to\n * @param replaceState whether to replace the current history state in the browser history\n * @param newWindow whether to open the page in a new window\n */\nexport function navigate(\n  pageRef: PageRef,\n  replaceState = false,\n  newWindow = false,\n): Promise<void> {\n  return syscall(\"editor.navigate\", pageRef, replaceState, newWindow);\n}\n\n/**\n * Opens the page navigator\n * @param mode the mode to open the navigator in\n */\nexport function openPageNavigator(\n  mode: \"page\" | \"meta\" | \"all\" = \"page\",\n): Promise<void> {\n  return syscall(\"editor.openPageNavigator\", mode);\n}\n\n/**\n * Opens the command palette\n */\nexport function openCommandPalette(): Promise<void> {\n  return syscall(\"editor.openCommandPalette\");\n}\n\n/**\n * Force reloads the current page\n */\nexport function reloadPage(): Promise<void> {\n  return syscall(\"editor.reloadPage\");\n}\n\n/**\n * Force reloads the browser UI\n */\nexport function reloadUI(): Promise<void> {\n  return syscall(\"editor.reloadUI\");\n}\n\n/**\n * Reloads the config and commands, also in the server\n */\nexport function reloadConfigAndCommands(): Promise<void> {\n  return syscall(\"editor.reloadConfigAndCommands\");\n}\n\n/**\n * Opens the specified URL in the browser\n * @param url the URL to open\n * @param existingWindow whether to open the URL in an existing window\n */\nexport function openUrl(url: string, existingWindow = false): Promise<void> {\n  return syscall(\"editor.openUrl\", url, existingWindow);\n}\n\n/**\n * This is calling the `go()` method from the History Web API.\n * @param delta Position in history to move to relative to the current page,\n * where a negative value moves backwards, and positive forwards\n */\nexport function goHistory(delta: number): Promise<void> {\n  return syscall(\"editor.goHistory\", delta);\n}\n\n/**\n * Force the client to download the file in dataUrl with filename as file name\n * @param filename the name of the file to download\n * @param dataUrl the dataUrl of the file to download\n */\nexport function downloadFile(filename: string, dataUrl: string): Promise<void> {\n  return syscall(\"editor.downloadFile\", filename, dataUrl);\n}\n\n/**\n * Triggers the browser's native file upload dialog/popup\n * @param accept the file types to accept\n * @param capture the capture mode for the file input\n */\nexport function uploadFile(\n  accept?: string,\n  capture?: string,\n): Promise<UploadFile> {\n  return syscall(\"editor.uploadFile\", accept, capture);\n}\n\n/**\n * Shows a flash notification to the user (top right corner)\n * @param message the message to show\n * @param type the type of notification to show\n */\nexport function flashNotification(\n  message: string,\n  type: \"info\" | \"error\" = \"info\",\n): Promise<void> {\n  return syscall(\"editor.flashNotification\", message, type);\n}\n\n/**\n * Exposes a filter box UI (similar to the page navigator and command palette)\n * @param label the label to show left of the input box\n * @param options the options to show and to filter on\n * @param helpText the help text to show below the input box\n * @param placeHolder the placeholder text to show in the input box\n */\nexport function filterBox(\n  label: string,\n  options: FilterOption[],\n  helpText = \"\",\n  placeHolder = \"\",\n): Promise<FilterOption | undefined> {\n  return syscall(\"editor.filterBox\", label, options, helpText, placeHolder);\n}\n\n/**\n * Shows a panel in the editor\n * @param id the location of the panel to show\n * @param mode the mode or \"size\" of the panel\n * @param html the html content of the panel\n * @param script the script content of the panel\n */\nexport function showPanel(\n  id: \"lhs\" | \"rhs\" | \"bhs\" | \"modal\",\n  mode: number,\n  html: string,\n  script = \"\",\n): Promise<void> {\n  return syscall(\"editor.showPanel\", id, mode, html, script);\n}\n\n/**\n * Hides a panel in the editor\n * @param id the location of the panel to hide\n */\nexport function hidePanel(\n  id: \"lhs\" | \"rhs\" | \"bhs\" | \"modal\",\n): Promise<void> {\n  return syscall(\"editor.hidePanel\", id);\n}\n\n/**\n * Insert text at the specified position into the editor\n * @param text the text to insert\n * @param pos\n */\nexport function insertAtPos(text: string, pos: number): Promise<void> {\n  return syscall(\"editor.insertAtPos\", text, pos);\n}\n\n/**\n * Replace the text in the specified range in the editor\n * @param from the start position of the range\n * @param to the end position of the range\n * @param text the text to replace with\n */\nexport function replaceRange(\n  from: number,\n  to: number,\n  text: string,\n): Promise<void> {\n  return syscall(\"editor.replaceRange\", from, to, text);\n}\n\n/**\n * Move the cursor to the specified position in the editor\n * @param pos the position to move the cursor to\n * @param center whether to center the cursor in the editor after moving\n */\nexport function moveCursor(pos: number, center = false): Promise<void> {\n  return syscall(\"editor.moveCursor\", pos, center);\n}\n\n/**\n * Move the cursor to the specified line and column in the editor\n * @param line the line number to move the cursor to\n * @param column the column number to move the cursor to\n * @param center whether to center the cursor in the editor after moving\n */\nexport function moveCursorToLine(\n  line: number,\n  column = 1,\n  center = false,\n): Promise<void> {\n  return syscall(\"editor.moveCursorToLine\", line, column, center);\n}\n\n/**\n * Insert text at the cursor position in the editor\n * @param text the text to insert\n */\nexport function insertAtCursor(text: string): Promise<void> {\n  return syscall(\"editor.insertAtCursor\", text);\n}\n\n/**\n * Dispatch a CodeMirror transaction: https://codemirror.net/docs/ref/#state.Transaction\n */\nexport function dispatch(change: any): Promise<void> {\n  return syscall(\"editor.dispatch\", change);\n}\n\n/**\n * Prompt the user for text input\n * @param message the message to show in the prompt\n * @param defaultValue a default value pre-filled in the prompt\n * @returns\n */\nexport function prompt(\n  message: string,\n  defaultValue = \"\",\n): Promise<string | undefined> {\n  return syscall(\"editor.prompt\", message, defaultValue);\n}\n\n/**\n * Prompt the user for confirmation\n * @param message the message to show in the confirmation dialog\n * @returns\n */\nexport function confirm(\n  message: string,\n): Promise<boolean> {\n  return syscall(\"editor.confirm\", message);\n}\n\n/**\n * Get the value of a UI option\n * @param key the key of the UI option to get\n * @returns\n */\nexport function getUiOption(key: string): Promise<any> {\n  return syscall(\"editor.getUiOption\", key);\n}\n\n/**\n * Set the value of a UI option\n * @param key the key of the UI option to set\n * @param value the value to set the UI option to\n */\nexport function setUiOption(key: string, value: any): Promise<void> {\n  return syscall(\"editor.setUiOption\", key, value);\n}\n\n/**\n * Perform a fold at the current cursor position\n */\nexport function fold(): Promise<void> {\n  return syscall(\"editor.fold\");\n}\n\n/**\n * Perform an unfold at the current cursor position\n */\nexport function unfold(): Promise<void> {\n  return syscall(\"editor.unfold\");\n}\n\n/**\n * Toggle the fold at the current cursor position\n */\nexport function toggleFold(): Promise<void> {\n  return syscall(\"editor.toggleFold\");\n}\n\n/**\n * Fold all code blocks in the editor\n */\nexport function foldAll(): Promise<void> {\n  return syscall(\"editor.foldAll\");\n}\n\n/**\n * Unfold all code blocks in the editor\n */\nexport function unfoldAll(): Promise<void> {\n  return syscall(\"editor.unfoldAll\");\n}\n\n/**\n * Perform an undo operation of the last edit in the editor\n */\nexport function undo(): Promise<void> {\n  return syscall(\"editor.undo\");\n}\n\n/**\n * Perform a redo operation of the last undo in the editor\n */\nexport function redo(): Promise<void> {\n  return syscall(\"editor.redo\");\n}\n\n/**\n * Open the editor's native search panel\n */\nexport function openSearchPanel(): Promise<void> {\n  return syscall(\"editor.openSearchPanel\");\n}\n\n/**\n * Copy the specified data to the clipboard\n * @param data the data to copy\n */\nexport function copyToClipboard(data: string | Blob): Promise<void> {\n  return syscall(\"editor.copyToClipboard\", data);\n}\n\n/**\n * Delete the current line in the editor\n */\nexport function deleteLine(): Promise<void> {\n  return syscall(\"editor.deleteLine\");\n}\n\n// Vim-mode specific syscalls\n\n/**\n * Execute a Vim ex command\n * @param exCommand the ex command to execute\n */\nexport function vimEx(exCommand: string): Promise<any> {\n  return syscall(\"editor.vimEx\", exCommand);\n}\n\n// denoCacheMetadata={\"headers\":{\"etag\":\"\\\"5f31a40a5a15f1d701e14f8efaf2f8a8\\\"\",\"x-goog-stored-content-length\":\"10245\",\"last-modified\":\"Wed, 04 Sep 2024 17:34:02 GMT\",\"x-goog-storage-class\":\"STANDARD\",\"cache-control\":\"public, max-age=31536000, immutable\",\"via\":\"1.1 google\",\"content-type\":\"text/typescript\",\"x-jsr-cache-id\":\"MEL\",\"access-control-expose-headers\":\"*\",\"x-robots-tag\":\"noindex\",\"content-security-policy\":\"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';\",\"expires\":\"Mon, 27 Oct 2025 12:33:18 GMT\",\"x-guploader-uploadid\":\"AHmUCY1r-NIurIrLzPhhlTmnPctzxj_6oju44Z4LIBJ-do1K6F-RinGFjIepaLGC9YJQbOHb-m8\",\"x-content-type-options\":\"nosniff\",\"alt-svc\":\"h3=\\\":443\\\"; ma=2592000,h3-29=\\\":443\\\"; ma=2592000\",\"x-jsr-cache-status\":\"miss\",\"date\":\"Sun, 27 Oct 2024 12:33:18 GMT\",\"server\":\"UploadServer\",\"x-goog-hash\":\"crc32c=IxOFpA==,md5=XzGkCloV8dcB4U+O+vL4qA==\",\"x-goog-generation\":\"1725471242609738\",\"access-control-allow-origin\":\"*\",\"x-goog-stored-content-encoding\":\"identity\",\"content-length\":\"10245\",\"accept-ranges\":\"bytes\",\"x-goog-metageneration\":\"1\",\"cross-origin-resource-policy\":\"cross-origin\"},\"url\":\"https://jsr.io/@silverbulletmd/silverbullet/0.9.4/plug-api/syscalls/editor.ts\",\"time\":1730032398}", "// declare global {\n//   function syscall(name: string, ...args: any[]): Promise<any>;\n// }\n\n// This is the case when running tests only, so giving it a dummy syscall function\nif (typeof self === \"undefined\") {\n  (self as any) = {\n    syscall: () => {\n      throw new Error(\"Not implemented here\");\n    },\n  };\n}\n\n// Late binding syscall\nexport function syscall(name: string, ...args: any[]): Promise<any> {\n  return (globalThis as any).syscall(name, ...args);\n}\n\n// denoCacheMetadata={\"headers\":{\"x-jsr-cache-status\":\"miss\",\"via\":\"1.1 google\",\"accept-ranges\":\"bytes\",\"x-goog-stored-content-length\":\"463\",\"x-goog-generation\":\"1725471242319361\",\"content-type\":\"text/typescript\",\"last-modified\":\"Wed, 04 Sep 2024 17:34:02 GMT\",\"x-goog-storage-class\":\"STANDARD\",\"cross-origin-resource-policy\":\"cross-origin\",\"alt-svc\":\"h3=\\\":443\\\"; ma=2592000,h3-29=\\\":443\\\"; ma=2592000\",\"cache-control\":\"public, max-age=31536000, immutable\",\"x-goog-stored-content-encoding\":\"identity\",\"date\":\"Sun, 27 Oct 2024 12:33:18 GMT\",\"x-robots-tag\":\"noindex\",\"access-control-allow-origin\":\"*\",\"server\":\"UploadServer\",\"access-control-expose-headers\":\"*\",\"x-content-type-options\":\"nosniff\",\"content-security-policy\":\"default-src 'none'; script-src 'none'; style-src 'none'; img-src 'none'; font-src 'none'; connect-src 'none'; frame-src 'none'; object-src 'none'; frame-ancestors 'none'; sandbox; form-action 'none';\",\"x-jsr-cache-id\":\"MEL\",\"content-length\":\"463\",\"etag\":\"\\\"7f51ff650cbb44cc057590677d146ea8\\\"\",\"expires\":\"Mon, 27 Oct 2025 12:33:18 GMT\",\"x-goog-hash\":\"crc32c=OlP20w==,md5=f1H/ZQy7RMwFdZBnfRRuqA==\",\"x-guploader-uploadid\":\"AHmUCY06KQ--ml7XO6hD3pWDHJOjXERtzv1poj2vq-OofKvKNzygHxfh1xSobwtcOCY-97HFYds\",\"x-goog-metageneration\":\"1\"},\"url\":\"https://jsr.io/@silverbulletmd/silverbullet/0.9.4/plug-api/syscall.ts\",\"time\":1730032398}", "import { editor } from \"@silverbulletmd/silverbullet/syscalls\";\r\n\r\nexport async function helloWorld() {\r\n  await editor.flashNotification(\"Hello world!\");\r\n}\r\n", "\nimport { setupMessageListener } from \"https://deno.land/x/silverbullet@0.9.4/lib/plugos/worker_runtime.ts\";\n\n// Imports\nimport {helloWorld as helloWorld} from \"file://D:\\\\code\\\\Github\\\\outline-sidebar\\\\outline-sidebar.ts\";\n\n\n// Function mapping\nconst functionMapping = {\n  helloWorld: helloWorld,\n\n};\n\n// Manifest\nconst manifest = {\n  \"name\": \"outline-sidebar\",\n  \"functions\": {\n    \"helloWorld\": {\n      \"path\": \"outline-sidebar.ts:helloWorld\",\n      \"command\": {\n        \"name\": \"Say hello\"\n      }\n    }\n  },\n  \"assets\": {}\n};\n\nexport const plug = {manifest, functionMapping};\n\nsetupMessageListener(functionMapping, manifest);\n"],
  "mappings": ";;;;;;;AAgBA,IAAM,qBAAqB,OAAO,WAAW;AAE3C,OAAO,WAAW,kBAAkB;AAItC,IAAI,OAAO,SAAS,aAAa;AAE/B,OAAK,OAAO;AAAA,IACV,MAAM,CAAC;AAAA;AAAA,IAEP,OAAO;AAAA,MACL,MAAM;AAAA,IACR;AAAA,IACA,KAAK;AAAA;AAAA,MAEH,MAAM;AAAA,MACN;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAM,kBAAkB,oBAAI,IAM1B;AAEF,IAAI,eAAe;AAEnB,SAAS,kBAAkB,KAAwB;AACjD,OAAK,YAAY,GAAG;AACtB;AAEA,IAAI,oBAAoB;AACtB,aAAW,UAAU,OAAO,SAAiB,SAAgB;AAC3D,WAAO,MAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC5C;AACA,sBAAgB,IAAI,cAAc,EAAE,SAAS,OAAO,CAAC;AACrD,wBAAkB;AAAA,QAChB,MAAM;AAAA,QACN,IAAI;AAAA,QACJ;AAAA,QACA;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AACF;AAEO,SAAS,qBAEdA,kBACAC,WACA;AACA,MAAI,CAAC,oBAAoB;AAGvB;AAAA,EACF;AACA,OAAK,iBAAiB,WAAW,CAAC,UAAmC;AACnE,KAAC,YAAY;AACX,YAAM,OAAO,MAAM;AACnB,cAAQ,KAAK,MAAM;AAAA,QACjB,KAAK;AACH;AACE,kBAAM,KAAKD,iBAAgB,KAAK,IAAK;AACrC,gBAAI,CAAC,IAAI;AACP,oBAAM,IAAI,MAAM,wBAAwB,KAAK,IAAI,EAAE;AAAA,YACrD;AACA,gBAAI;AACF,oBAAM,SAAS,MAAM,QAAQ,QAAQ,GAAG,GAAI,KAAK,QAAQ,CAAC,CAAE,CAAC;AAC7D,gCAAkB;AAAA,gBAChB,MAAM;AAAA,gBACN,IAAI,KAAK;AAAA,gBACT;AAAA,cACF,CAAsB;AAAA,YACxB,SAAS,GAAQ;AACf,sBAAQ;AAAA,gBACN;AAAA,gBACA,KAAK;AAAA,gBACL;AAAA,gBACA,EAAE;AAAA,cACJ;AACA,gCAAkB;AAAA,gBAChB,MAAM;AAAA,gBACN,IAAI,KAAK;AAAA,gBACT,OAAO,EAAE;AAAA,cACX,CAAC;AAAA,YACH;AAAA,UACF;AACA;AAAA,QACF,KAAK;AACH;AACE,kBAAM,YAAY,KAAK;AACvB,kBAAM,SAAS,gBAAgB,IAAI,SAAS;AAC5C,gBAAI,CAAC,QAAQ;AACX,oBAAM,MAAM,oBAAoB;AAAA,YAClC;AACA,4BAAgB,OAAO,SAAS;AAChC,gBAAI,KAAK,OAAO;AACd,qBAAO,OAAO,IAAI,MAAM,KAAK,KAAK,CAAC;AAAA,YACrC,OAAO;AACL,qBAAO,QAAQ,KAAK,MAAM;AAAA,YAC5B;AAAA,UACF;AAEA;AAAA,MACJ;AAAA,IACF,GAAG,EAAE,MAAM,QAAQ,KAAK;AAAA,EAC1B,CAAC;AAED,oBAAkB;AAAA,IAChB,MAAM;AAAA,IACN,UAAAC;AAAA,EACF,CAAC;AACH;AAEO,SAAS,aAAa,GAAuB;AAClD,QAAM,YAAY,KAAK,CAAC;AACxB,QAAM,MAAM,UAAU;AACtB,QAAM,QAAQ,IAAI,WAAW,GAAG;AAChC,WAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,UAAM,CAAC,IAAI,UAAU,WAAW,CAAC;AAAA,EACnC;AACA,SAAO;AACT;AAEO,SAAS,aAAa,QAAqC;AAChE,MAAI,OAAO,WAAW,UAAU;AAC9B,aAAS,IAAI,YAAY,EAAE,OAAO,MAAM;AAAA,EAC1C;AACA,MAAI,SAAS;AACb,QAAM,MAAM,OAAO;AACnB,WAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,cAAU,OAAO,aAAa,OAAO,CAAC,CAAC;AAAA,EACzC;AACA,SAAO,KAAK,MAAM;AACpB;AAEA,eAAsB,aACpB,SACA,SAC6B;AAC7B,MAAI,OAAO,YAAY,UAAU;AAC/B,UAAM,OAAO,IAAI,WAAW,MAAM,QAAQ,YAAY,CAAC;AACvD,UAAM,cAAc,KAAK,SAAS,IAAI,aAAa,IAAI,IAAI;AAC3D,cAAU;AAAA,MACR,QAAQ,QAAQ;AAAA,MAChB,SAAS,OAAO,YAAY,QAAQ,QAAQ,QAAQ,CAAC;AAAA,MACrD,YAAY;AAAA,IACd;AACA,cAAU,QAAQ;AAAA,EACpB;AACA,SAAO,QAAQ,sBAAsB,SAAS,OAAO;AACvD;AAGA,WAAW,cAAc,WAAW;AAE7B,SAAS,mBAAmB;AAEjC,aAAW,QAAQ,eACjB,SACA,MACmB;AACnB,UAAM,cAAc,QAAQ,KAAK,OAC7B;AAAA,MACA,IAAI,WAAW,MAAO,IAAI,SAAS,KAAK,IAAI,EAAG,YAAY,CAAC;AAAA,IAC9D,IACE;AACJ,UAAM,IAAI,MAAM;AAAA,MACd;AAAA,MACA,QAAQ;AAAA,QACN,QAAQ,KAAK;AAAA,QACb,SAAS,KAAK;AAAA,QACd,YAAY;AAAA,MACd;AAAA,IACF;AACA,WAAO,IAAI,SAAS,EAAE,aAAa,aAAa,EAAE,UAAU,IAAI,MAAM;AAAA,MACpE,QAAQ,EAAE;AAAA,MACV,SAAS,EAAE;AAAA,IACb,CAAC;AAAA,EACH;AACF;AAEA,IAAI,oBAAoB;AACtB,mBAAiB;AACnB;;;AC7MA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACKA,IAAI,OAAO,SAAS,aAAa;AAC/B,EAAC,OAAe;AAAA,IACd,SAAS,MAAM;AACb,YAAM,IAAI,MAAM,sBAAsB;AAAA,IACxC;AAAA,EACF;AACF;AAGO,SAASC,SAAQ,SAAiB,MAA2B;AAClE,SAAQ,WAAmB,QAAQ,MAAM,GAAG,IAAI;AAClD;;;ADDO,SAAS,iBAAkC;AAChD,SAAOC,SAAQ,uBAAuB;AACxC;AAKO,SAAS,UAA2B;AACzC,SAAOA,SAAQ,gBAAgB;AACjC;AAMO,SAAS,QAAQ,SAAgC;AACtD,SAAOA,SAAQ,kBAAkB,OAAO;AAC1C;AAKO,SAAS,YAA6B;AAC3C,SAAOA,SAAQ,kBAAkB;AACnC;AAKO,SAAS,eAAsD;AACpE,SAAOA,SAAQ,qBAAqB;AACtC;AAOO,SAAS,aAAa,MAAc,IAA2B;AACpE,SAAOA,SAAQ,uBAAuB,MAAM,EAAE;AAChD;AAKO,SAAS,OAAsB;AACpC,SAAOA,SAAQ,aAAa;AAC9B;AAQO,SAAS,SACd,SACA,eAAe,OACf,YAAY,OACG;AACf,SAAOA,SAAQ,mBAAmB,SAAS,cAAc,SAAS;AACpE;AAMO,SAAS,kBACd,OAAgC,QACjB;AACf,SAAOA,SAAQ,4BAA4B,IAAI;AACjD;AAKO,SAAS,qBAAoC;AAClD,SAAOA,SAAQ,2BAA2B;AAC5C;AAKO,SAAS,aAA4B;AAC1C,SAAOA,SAAQ,mBAAmB;AACpC;AAKO,SAAS,WAA0B;AACxC,SAAOA,SAAQ,iBAAiB;AAClC;AAKO,SAAS,0BAAyC;AACvD,SAAOA,SAAQ,gCAAgC;AACjD;AAOO,SAAS,QAAQ,KAAa,iBAAiB,OAAsB;AAC1E,SAAOA,SAAQ,kBAAkB,KAAK,cAAc;AACtD;AAOO,SAAS,UAAU,OAA8B;AACtD,SAAOA,SAAQ,oBAAoB,KAAK;AAC1C;AAOO,SAAS,aAAa,UAAkB,SAAgC;AAC7E,SAAOA,SAAQ,uBAAuB,UAAU,OAAO;AACzD;AAOO,SAAS,WACd,QACA,SACqB;AACrB,SAAOA,SAAQ,qBAAqB,QAAQ,OAAO;AACrD;AAOO,SAAS,kBACd,SACA,OAAyB,QACV;AACf,SAAOA,SAAQ,4BAA4B,SAAS,IAAI;AAC1D;AASO,SAAS,UACd,OACA,SACA,WAAW,IACX,cAAc,IACqB;AACnC,SAAOA,SAAQ,oBAAoB,OAAO,SAAS,UAAU,WAAW;AAC1E;AASO,SAAS,UACd,IACA,MACA,MACA,SAAS,IACM;AACf,SAAOA,SAAQ,oBAAoB,IAAI,MAAM,MAAM,MAAM;AAC3D;AAMO,SAAS,UACd,IACe;AACf,SAAOA,SAAQ,oBAAoB,EAAE;AACvC;AAOO,SAAS,YAAY,MAAc,KAA4B;AACpE,SAAOA,SAAQ,sBAAsB,MAAM,GAAG;AAChD;AAQO,SAAS,aACd,MACA,IACA,MACe;AACf,SAAOA,SAAQ,uBAAuB,MAAM,IAAI,IAAI;AACtD;AAOO,SAAS,WAAW,KAAa,SAAS,OAAsB;AACrE,SAAOA,SAAQ,qBAAqB,KAAK,MAAM;AACjD;AAQO,SAAS,iBACd,MACA,SAAS,GACT,SAAS,OACM;AACf,SAAOA,SAAQ,2BAA2B,MAAM,QAAQ,MAAM;AAChE;AAMO,SAAS,eAAe,MAA6B;AAC1D,SAAOA,SAAQ,yBAAyB,IAAI;AAC9C;AAKO,SAAS,SAAS,QAA4B;AACnD,SAAOA,SAAQ,mBAAmB,MAAM;AAC1C;AAQO,SAAS,OACd,SACA,eAAe,IACc;AAC7B,SAAOA,SAAQ,iBAAiB,SAAS,YAAY;AACvD;AAOO,SAAS,QACd,SACkB;AAClB,SAAOA,SAAQ,kBAAkB,OAAO;AAC1C;AAOO,SAAS,YAAY,KAA2B;AACrD,SAAOA,SAAQ,sBAAsB,GAAG;AAC1C;AAOO,SAAS,YAAY,KAAa,OAA2B;AAClE,SAAOA,SAAQ,sBAAsB,KAAK,KAAK;AACjD;AAKO,SAAS,OAAsB;AACpC,SAAOA,SAAQ,aAAa;AAC9B;AAKO,SAAS,SAAwB;AACtC,SAAOA,SAAQ,eAAe;AAChC;AAKO,SAAS,aAA4B;AAC1C,SAAOA,SAAQ,mBAAmB;AACpC;AAKO,SAAS,UAAyB;AACvC,SAAOA,SAAQ,gBAAgB;AACjC;AAKO,SAAS,YAA2B;AACzC,SAAOA,SAAQ,kBAAkB;AACnC;AAKO,SAAS,OAAsB;AACpC,SAAOA,SAAQ,aAAa;AAC9B;AAKO,SAAS,OAAsB;AACpC,SAAOA,SAAQ,aAAa;AAC9B;AAKO,SAAS,kBAAiC;AAC/C,SAAOA,SAAQ,wBAAwB;AACzC;AAMO,SAAS,gBAAgB,MAAoC;AAClE,SAAOA,SAAQ,0BAA0B,IAAI;AAC/C;AAKO,SAAS,aAA4B;AAC1C,SAAOA,SAAQ,mBAAmB;AACpC;AAQO,SAAS,MAAM,WAAiC;AACrD,SAAOA,SAAQ,gBAAgB,SAAS;AAC1C;;;AErYA,eAAsB,aAAa;AACjC,QAAM,eAAO,kBAAkB,cAAc;AAC/C;;;ACIA,IAAM,kBAAkB;AAAA,EACtB;AAEF;AAGA,IAAM,WAAW;AAAA,EACf,QAAQ;AAAA,EACR,aAAa;AAAA,IACX,cAAc;AAAA,MACZ,QAAQ;AAAA,MACR,WAAW;AAAA,QACT,QAAQ;AAAA,MACV;AAAA,IACF;AAAA,EACF;AAAA,EACA,UAAU,CAAC;AACb;AAEO,IAAM,OAAO,EAAC,UAAU,gBAAe;AAE9C,qBAAqB,iBAAiB,QAAQ;",
  "names": ["functionMapping", "manifest", "syscall", "syscall"]
}
